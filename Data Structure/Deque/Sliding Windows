package com.lamresearch.dtocm.cProgramming.array;

import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;

public class SlidingWindowsMax {
    public static void main(String arg[]) {
        int wind[] = {1, 2, 3, 1, 4, 5, 2, 3, 6};
        int K = 3;
        //  List<Integer> list = windowSlidingMax(wind,K);
        List<Integer> list = new ArrayList<>();
        printMax(wind, K);
        for (int l : list) {
            System.out.print(l + "     ");
        }
    }

    static void printMax(int arr[], int k) {

        int n = arr.length;
        // Create a Double Ended Queue, Qi that will store indexes of array elements
        // The queue will store indexes of useful elements in every window and it will
        // maintain decreasing order of values from front to rear in Qi, i.e.,
        // arr[Qi.front[]] to arr[Qi.rear()] are sorted in decreasing order
        Deque<Integer> Qi = new LinkedList<Integer>();

        /* Process first k (or first window) elements of array */
        int i;
        for (i = 0; i < k; ++i) {
            // For every element, the previous smaller elements are useless so
            // remove them from Qi
            while (!Qi.isEmpty() && arr[i] >= arr[Qi.peekLast()])
                Qi.removeLast(); // Remove from rear

            // Add new element at rear of queue
            Qi.addLast(i);
        }

        // Process rest of the elements, i.e., from arr[k] to arr[n-1]
        for (; i < n; ++i) {
            // The element at the front of the queue is the largest element of
            // previous window, so print it
            System.out.print(arr[Qi.peek()] + " ");

            // Remove the elements which are out of this window
            while ((!Qi.isEmpty()) && Qi.peek() <= i - k)
                Qi.removeFirst();

            // Remove all elements smaller than the currently
            // being added element (remove useless elements)
            while ((!Qi.isEmpty()) && arr[i] >= arr[Qi.peekLast()])
                Qi.removeLast();

            // Add current element at the rear of Qi
            Qi.addLast(i);
        }

        // Print the maximum element of last window
        System.out.print(arr[Qi.peek()]);
    }
}





//    private static List<Integer> windowSlidingMax(int[] wind, int k) {
//        List<Integer> list = new ArrayList<>();
//        int n = wind.length;
//
//        for(int i = 0;i<=n-k;i++){
//            int max = wind[i];
//            for(int j =1;j<k;j++) {
//                if (wind[i + j] > max) {
//                    max = wind[i + j];
//                }
//            }
//                list.add(max);
//
//        }
//        return list;
//    }
//}
