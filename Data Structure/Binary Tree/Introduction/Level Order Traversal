
/**
 * Steps 1:
 * printLevelOrder(tree)
 *  for d=1 to height(tree)
 *   printGivenLevel(tree, d)
 *
 *   Steps 2:
 *   printGivenLevel(tree, level)
 *   if tree is Null then return
 *   if(level ==1 ) print(tree.data)
 *
 *   else if(level>1)
 *   printGivenLevel(tree.left, level-1);
 *   printGivenLevel(tree.right, level-1);
 *
 *
 */
class Node{
    int data;
    Node left, right;
    public Node(int data){
        this.data = data;
        left = null;
        right = null;
    }
}
 class LevelOrderTreeTraversal {
    Node root;
    int h = 0;
    public static void main(String[] arg){
        LevelOrderTreeTraversal tree = new LevelOrderTreeTraversal();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);

        System.out.print("Level order traversal of binary tree"+ "  ");
        tree.printLevelOrder();
    }

     private void printLevelOrder() {
        int h = height(root);
        for(int i = 1;i<=h ;i ++) {
            printGivenLevel(root, i);
        }
     }

     // Find height of Binary Tree
      int height(Node root) {
        if(root == null) return 0;
        else {
            int lheight = height(root.left);
            int rheight = height(root.right);

            if (lheight>rheight) return lheight+1;
             else return rheight+1;
        }

     }

// Print nodes at given level
     private void printGivenLevel(Node root, int level) {
       if(root == null) return;
       if(level == 1){
           System.out.print(root.data);
           System.out.print("  ");
       }
       else if(level>1){
           printGivenLevel(root.left,level-1);
           printGivenLevel(root.right, level-1);
       }
     }
 }
