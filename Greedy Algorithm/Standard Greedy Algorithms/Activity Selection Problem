
import java.util.Arrays;
import java.util.Comparator;

// Tag : Minimum halls required for class scheduling
/*

      You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person, assuming that a person can 
      only work on a single activity at a time.
      Example 1 : Consider the following 3 activities sorted by
      by finish time.
           start[]  =  {10, 12, 20};
           finish[] =  {20, 25, 30};
      A person can perform at most two activities. The
      maximum set of activities that can be executed
      is {0, 2} [ These are indexes in start[] and
      finish[] ]


Steps : 1. Sort activities according(ASCending) to their finishing time
        2. Select first activity from sorted array and print it.
        3 .Do following remaining activities in sorted array
            a) if start time is greated than or equal to finish time of
               previously selected activity then select and print it.
*/


public class ActivitySelectionProblem {
    public static void main(String arg[]){
       // int start[] = {1,3,0,5,8,5};
        //int finish[] = {2,4,6,7,9,9};

       // int s[][] = {{0,6},{1,2},{3,4},{5,7},{8,9},{5,9}};
        int s[][] =  {{5, 9}, {1, 2}, {3, 4}, {0, 6},
            {5, 7}, {8, 9}};

       // int s[][] = {{0, 5}, {1, 2}, {6, 10}};
      
        printMaxActivities(s);
    }

    private static void printMaxActivities(int[][] start) {
    
// 1. Sort Activities according finishing time
        int col= 1;
        Arrays.sort(start, new Comparator<int[]>() {
            @Override
            public int compare(int[] arr1, int[] arr2) {
                if(arr1[col]>arr2[col]) return 1;
                else return -1;
            }
        });
        int n = start.length;
        int count =1;
        
        
// 2. First Element is always selected
        int i =0,j;
        //System.out.print(start[i][0]+"  " + i + " ");
// 3. Start time >= previous Finish time
        for(j =1;j<n;j++ ){

            if(start[j][0]>= start[i][1]){
                System.out.print(start[i][0]+"  "+start[j][1]+ " ");
                i=j;
                count++;
            }
            System.out.println();
        }
        System.out.println("Total room "+ count);
    }

}
