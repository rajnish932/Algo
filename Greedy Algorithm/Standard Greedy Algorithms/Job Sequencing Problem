
package com.lamresearch.dtocm.greedy.stanadardAlgorithm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

/*
* Given an array of jobs where every job has a deadline and associated profit if job is finished before the dedline.
*  Minimum possible dedline for any job is 1. Maximize total profit
* Example: Four Jobs with Following deadlines and profit
* JobID  Deadline  Profit
  a      4        20
  b      1        10
  c      1        40
  d      1        30
Output: Following is maximum
profit sequence of jobs
        c, a

   *
   *
   * Steps:
   * 1) Sort all jobs in Decreasing order of profit
   * 2) Iterate on jobs in Dec order of profit. For each job,do the following
   *    a)  FInd a time slot i, such that slot is empty and i<deadline and i is greatest.
   *        Put the job in this slot and mark this slot filled
   *     b) If no such i exists , then ignore the job.
*
*
* */
public  class JobSequencingProblem {

    static class Job implements Comparable<Job> {
        char id;
        int dead;
        int profit;

        @Override
        public int compareTo(Job otherJob){
            return +1;
        }

        public Job(char id, int dead, int profit) {
            this.id = id;
            this.dead = dead;
            this.profit = profit;
        }
    }


    public static void main(String[] arg){
        JobSequencingProblem jobSequencingProblem = new JobSequencingProblem();
        ArrayList<Job> jobs = new ArrayList<Job>();

        jobs.add(new Job('a', 2, 100));
        jobs.add(new Job('b', 1, 19));
        jobs.add(new Job('c', 2, 27));
        jobs.add(new Job('d', 1, 25));
        jobs.add(new Job('e', 3, 15));
// 1. Sort all jobs        
        Collections.sort(jobs);

// Display jobs after sorting
         for(int i = 0;i<jobs.size();i++) {
             System.out.print(jobs.get(i).id + "     " + jobs.get(i).dead+"  "+jobs.get(i).profit);
             System.out.println("");
         }
         maxProfit(jobs);
    }

    private static void maxProfit(ArrayList<Job> jobs) {
        int n = jobs.size();
// To store Sequence of job
        int result[] = new int[n];
 // Array to store used and unused slots info
     Boolean slot[]  = new Boolean[n];
// Initially put all slots are empty i.e false
     Arrays.fill(slot,false);

     int pro = 0;
// Each job in Dec order of thier profits
        
//Step2 : 
     for(int i =0; i<n;i++){
// search for next free slot and map the task to that slot
         for(int j = jobs.get(i).dead-1;j>=0;j--){
             if(slot[i] == false){
                 result[j] = i;
                 slot[j] = true;
                 pro += jobs.get(i).profit;
                 break;
             }
         }
     }
     for(int i = 0;i<jobs.size();i++){
         if(slot[i]){
             System.out.print(jobs.get(result[i]).id +"  "+jobs.get(result[i]).dead+ "  "+ jobs.get(result[i]).profit);
         }
     }
    }
}
