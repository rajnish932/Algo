package com.lamresearch.dtocm.cProgramming.greedy.algorithmInArray;
/*
* Input: Set[], set_size
1. Get the size of power set
    powet_set_size = pow(2, set_size)
2  Loop for counter from 0 to pow_set_size
     (a) Loop for i = 0 to set_size
          (i) If ith bit in counter is set
               Print ith element from set for this subset
     (b) Print separator for subsets i.e., newline
     *
     *
   Example : Set  = [a,b,c]
power_set_size = pow(2, 3) = 8
Run for binary counter = 000 to 111

Value of Counter            Subset
    000                    -> Empty set
    001                    -> a
    010                    -> b
    011                    -> ab
    100                    -> c
    101                    -> ac
    110                    -> bc
    111                    -> abc
    *
    *
*
* */
import java.util.ArrayList;
import java.util.List;

public class powerSet {
    public static void main(String [] arg){
        char ch[] = {'a','b','c'};
        powerSett(ch);
    }

    private static void powerSett(char[] ch) {
        int n = ch.length;

       /*set_size of power set of a set with set_size n is (2**n -1)*/
        long pow_set_size =
            (long)Math.pow(2, n);
        int counter, j;

		/*Run from counter 000..0 to 111..1*/
        for(counter = 0; counter < pow_set_size; counter++)
        {
            System.out.print("{ ");
            for(j = 0; j < n; j++)
            {
				/* Check if jth bit in the counter is set If set then print jth element from set */
                if((counter & (1 << j)) > 0)
                    System.out.print(ch[j] +"" );

            }
           

            System.out.println("}");
        }
    }
}
