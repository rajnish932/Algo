/****
 *
 *onsider city 1 (let say 0th node) as the starting and ending point. Since route is cyclic, we can consider any point as starting point.
 * Start traversing from the source to its adjacent nodes in dfs manner.
 * Calculate cost of every traversal and keep track of minimum cost and keep on updating the value of minimum cost stored value.
 * Return the permutation with minimum cost.
 *
 * ***/

public class TravellingSalesPerson {
    public static void main(String[] arg) {
        int graph[][] = {{0, 10, 15, 20},
            {10, 0, 35, 25},
            {15, 35, 0, 30},
            {20, 25, 30, 0}};
        int n = 4;
        boolean []visited = new boolean[n];
        int ans = Integer.MAX_VALUE;
 // Find minimum weight Hamiltonian Cycle
      ans = tsp(graph, visited,0,n,1,0,ans);

        System.out.println(ans+ " ");

    }

    private static int tsp(int[][] graph, boolean[] visited, int currPos, int n, int count, int cost, int ans) {
// If last node is reached and it has a link to the staritng node
// i.e the source then keep minimum value out of the total cost

        if(count == n && graph[currPos][0]>0){
            ans = Math.min(ans, cost+graph[currPos][0]);
            return ans;
        }
// BackTracking Step
// Loop to traverse the adajacency list of currPos node and increasing the count
//        // by 1 and cost by graph[currPos,i] value


     for(int i =0;i<n;i++){
         if(visited[i] == false && graph[currPos][i]>0){


   // Mark as visited
   visited[i] = true;
       ans = tsp(graph,visited,i,n,count+1,cost+graph[currPos][i], ans);

   // Mark ith node as unvisited
        visited[i] = false;
         }
     }
     return ans;
    }
}


