
/*********
Greedy Algorithm to assign colors. It doesn’t guarantee to use minimum colors, but it guarantees an upper bound on the number of colors. 
The basic algorithm never uses more than d+1 colors where d is the maximum degree of a vertex in the given graph


Steps: 
1. Color first vertex with first color.
2. Do following for remaining V-1 vertices.
….. a) Consider the currently picked vertex and color it with the
lowest numbered color that has not been used on any previously
colored vertices adjacent to it. If all previously used colors
appear on vertices adjacent to v, assign a new color to it.







*******/

import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;

public class GraphColor {
    int V;
    LinkedList adj[];

 //Constructor
 GraphColor(int v) {
     this.V = v;
     adj = new LinkedList[v];
     for (int i = 0; i < V; i++) {
         adj[i] = new LinkedList();
     }
 }
// Function to add an edge into graph
void addEdge(int V, int w){
         adj[V].add(w);
         adj[w].add(V);
     }
     public static void main(String []args){
     GraphColor g1 = new GraphColor(5);
         g1.addEdge(0, 1);
         g1.addEdge(0, 2);
         g1.addEdge(1, 2);
         g1.addEdge(1, 3);
         g1.addEdge(2, 3);
         g1.addEdge(3, 4);
         System.out.println("Coloring of graph 1");
         g1.greedyColoring();

     }

    private void greedyColoring() {
        // Assigns colors (starting from 0) to all vertices and
        // prints the assignment of colors
        int result[] = new int[V];
        // Count color
        int count = 1;

        // Initialize all vertices as unassigned
        Arrays.fill(result, -1);

        // Assign the first color to first vertex
        result[0] = 0;

        // A temporary array to store the available colors. False
        // value of available[cr] would mean that the color cr is
        // assigned to one of its adjacent vertices
        boolean available[] = new boolean[V];

        // Initially, all colors are available
        Arrays.fill(available, true);

        // Assign colors to remaining V-1 vertices
        for (int u = 1; u < V; u++) {
            // Process all adjacent vertices and flag their colors
            // as unavailable
            Iterator<Integer> it = adj[u].iterator();
            while (it.hasNext()) {
                int i = it.next();
                if (result[i] != -1)
                    available[result[i]] = false;
              
            }

            // Find the first available color
            int cr;
            for (cr = 0; cr < V; cr++) {
                if (available[cr])
                    break;
            }

            result[u] = cr; // Assign the found color
            count++;

            // Reset the values back to true for the next iteration
            Arrays.fill(available, true);
        }

        // print the result
        for (int u = 0; u < V; u++)
            System.out.println("Vertex " + u + " --->  Color "
                + result[u]);
        System.out.println("Total Number of Color "+ count);
    }
    }

